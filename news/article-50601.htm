<!doctype html>
<html lang="en">

<head>
        <link rel="canonical" href="https://windowsclashnode.github.io/news/article-50601.htm" />
    <!-- Required Meta Tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Document Title, Description, and Author -->
    <title>垃圾收集器与内存分配策略_在线工具</title>
        <meta name="description" content="内存分配和回收策略 目录  			 程序计数器、虚拟机栈、本地方法栈三个区域随着线程的创建而创建、执行完成销毁，栈中的栈帧随着放大的进入和退出执行入栈与出栈，每个栈帧分配多少内存基本上是在类结构确定下" />
        <link rel="icon" href="/assets/website/img/windowsclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsClashNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsclashnode.github.io/news/article-50601.htm" />
    <meta property="og:site_name" content="WindowsClashNode节点订阅站" />
    <meta property="og:title" content="垃圾收集器与内存分配策略_在线工具" />
    <meta property="og:image" content="https://windowsclashnode.github.io/uploads/20240618/cbe8b7647b079ac5716952f5f3f012fd.webp" />
        <meta property="og:release_date" content="2025-02-03T09:27:37" />
    <meta property="og:updated_time" content="2025-02-03T09:27:37" />
        <meta property="og:description" content="内存分配和回收策略 目录  			 程序计数器、虚拟机栈、本地方法栈三个区域随着线程的创建而创建、执行完成销毁，栈中的栈帧随着放大的进入和退出执行入栈与出栈，每个栈帧分配多少内存基本上是在类结构确定下" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="垃圾收集器与内存分配策略_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google Fonts Files -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Condensed:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap" rel="stylesheet">
    <!-- CSS Files -->
    <link rel="stylesheet" href="/assets/website/css/windowsclashnode/hello-bsb.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FQY7STE0Q8"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FQY7STE0Q8');
</script>    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#bsb-tpl-navbar" data-bs-smooth-scroll="true" tabindex="0" data-page="detail">
        <!-- Header -->
    <header id="header" class="sticky-top bsb-tpl-header-sticky bsb-tpl-header-sticky-animationX">
        <!-- Navbar 1 - Bootstrap Brain Component -->
        <nav id="scrollspyNav" class="navbar navbar-expand-lg bsb-tpl-bg-alabaster bsb-navbar bsb-navbar-hover bsb-navbar-caret bsb-tpl-navbar-sticky" data-bsb-sticky-target="#header">
            <div class="container">
                <a class="navbar-brand" href="/">
                                <span>Windows ClashNode</span>
                                </a>
                <button class="navbar-toggler border-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" />
                    </svg>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Menu</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <ul id="bsb-tpl-navbar" class="navbar-nav justify-content-end flex-grow-1">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="#">关于</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">联系</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <!-- Hero 3 - Bootstrap Brain Component -->
    <section id="scrollspyHero" class="bsb-tpl-bg-alabaster pt-3 pt-xl-2 list">
        <div class="container overflow-hidden">
            <div class="row gy-5 gy-lg-0">
                <div class="col-12 col-lg-6 slogan">
                    <h1 class="display-3 fw-bold mb-3">垃圾收集器与内存分配策略_在线工具 </h1>
                    <p class="fs-4 mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
                <div class="col-12 col-lg-5 text-center">
                    <div class="position-relative">
                        <div class="bsb-circle border border-4 border-accent position-absolute top-50 start-10 translate-middle z-1"></div>
                        <div class="bsb-circle bg-primary position-absolute top-50 start-50 translate-middle" style="--bsb-cs: 460px;"></div>
                        <div class="bsb-circle border border-4 border-accent position-absolute top-10 end-0 z-1" style="--bsb-cs: 100px;"></div>
                        <img class="img-fluid position-relative z-2" loading="lazy" href="/assets/website/img/windowsclashnode/hero/hero-img-1.webp" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Main -->
    <main id="main">
        <!-- Process 1 - Bootstrap Brain Component -->
        <section id="scrollspyAbout" class="py-5 py-xl-8 py-xxl-16">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="内存分配和回收策略">内存分配和回收策略</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <p>程序计数器、虚拟机栈、本地方法栈三个区域随着线程的创建而创建、执行完成销毁，栈中的栈帧随着放大的进入和退出执行入栈与出栈，每个栈帧分配多少内存基本上是在类结构确定下来时已知，因此这几个区域的内存分配与回收都具备确定性。<br />Java堆中存放的所有对象的实例，只有在程序运行期间我们才会知道会创建哪些对象，这部分内存分配与回收都是动态的，垃圾收集器重点关注的就是这部分。</p> <p><strong>引入计数算数</strong><br />给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器都为0的的对象就是不可能再被使用的。<br />缺点：它很难解决对象之间的相互循环引用的问题。</p> <p>VM ages:-XX:+PrintGCDetails 打印GC详细信息：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">package memory;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> ReferenceCountingGC {</span><span style="color: rgba(0, 0, 255, 1)">public</span> Object instance =<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span>  final<span style="color: rgba(0, 0, 255, 1)">int</span> _1MB =<span style="color: rgba(128, 0, 128, 1)">1024</span> *<span style="color: rgba(128, 0, 128, 1)">1024</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[] bigSize =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[<span style="color: rgba(128, 0, 128, 1)">2</span> *<span style="color: rgba(0, 0, 0, 1)">_1MB];</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  main(String[] arg){         ReferenceCountingGC objA</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ReferenceCountingGC();         ReferenceCountingGC objB</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ReferenceCountingGC();         objA.instance</span>=<span style="color: rgba(0, 0, 0, 1)"> objB;         objB.instance</span>=<span style="color: rgba(0, 0, 0, 1)"> objA;          System.gc();     } }</span></pre> </div> <p>日志：</p> <div class="cnblogs_code"> <pre>[<span style="color: rgba(128, 0, 128, 1)">15</span>.841s][info   ][gc,start    ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">) Pause Full (System.gc()) [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.842s][info   ][gc,task     ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Using<span style="color: rgba(128, 0, 128, 1)">3</span> workers of<span style="color: rgba(128, 0, 128, 1)">8</span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> full compaction [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.843s][info   ][gc,phases,start] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">: Mark live objects [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.847s][info   ][gc,phases      ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">1</span>: Mark live objects<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">.412ms [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.848s][info   ][gc,phases,start] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">2</span>: Prepare<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> compaction [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.849s][info   ][gc,phases      ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">2</span>: Prepare<span style="color: rgba(0, 0, 255, 1)">for</span> compaction<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">.244ms [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.849s][info   ][gc,phases,start] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">: Adjust pointers [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.851s][info   ][gc,phases      ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">3</span>: Adjust pointers<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">.951ms [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.851s][info   ][gc,phases,start] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">: Compact heap [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.853s][info   ][gc,phases      ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Phase<span style="color: rgba(128, 0, 128, 1)">4</span>: Compact heap<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">.987ms [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,heap        ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Eden regions:<span style="color: rgba(128, 0, 128, 1)">4</span>-&gt;<span style="color: rgba(128, 0, 128, 1)">0</span>(<span style="color: rgba(128, 0, 128, 1)">9</span><span style="color: rgba(0, 0, 0, 1)">) [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,heap        ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Survivor regions:<span style="color: rgba(128, 0, 128, 1)">0</span>-&gt;<span style="color: rgba(128, 0, 128, 1)">0</span>(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">) [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,heap        ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Old regions:<span style="color: rgba(128, 0, 128, 1)">0</span>-&gt;<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)"> [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,heap        ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Archive regions:<span style="color: rgba(128, 0, 128, 1)">0</span>-&gt;<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)"> [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,heap        ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Humongous regions:<span style="color: rgba(128, 0, 128, 1)">6</span>-&gt;<span style="color: rgba(128, 0, 128, 1)">6</span><span style="color: rgba(0, 0, 0, 1)"> [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,metaspace   ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Metaspace: 424K(640K)-&gt;424K(640K) NonClass: 399K(512K)-&gt;399K(512K) Class: 24K(128K)-&gt;<span style="color: rgba(0, 0, 0, 1)">24K(128K) [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc             ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) Pause Full (System.gc()) 9M-&gt;6M(30M)<span style="color: rgba(128, 0, 128, 1)">15</span><span style="color: rgba(0, 0, 0, 1)">.980ms [</span><span style="color: rgba(128, 0, 128, 1)">15</span>.857s][info   ][gc,cpu         ] GC(<span style="color: rgba(128, 0, 128, 1)">0</span>) User=<span style="color: rgba(128, 0, 128, 1)">0</span>.02s Sys=<span style="color: rgba(128, 0, 128, 1)">0</span>.02s Real=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">.02s [</span><span style="color: rgba(128, 0, 128, 1)">17</span><span style="color: rgba(0, 0, 0, 1)">.684s][info   ][gc,heap,exit   ] Heap [</span><span style="color: rgba(128, 0, 128, 1)">17</span>.684s][info   ][gc,heap,exit   ]  garbage-first heap   total 30720K, used 7088K [<span style="color: rgba(128, 0, 128, 1)">0x0000000081800000</span>,<span style="color: rgba(128, 0, 128, 1)">0x0000000100000000</span><span style="color: rgba(0, 0, 0, 1)">) [</span><span style="color: rgba(128, 0, 128, 1)">17</span>.684s][info   ][gc,heap,exit   ]   region size 1024K,<span style="color: rgba(128, 0, 128, 1)">1</span> young (1024K),<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)"> survivors (0K) [</span><span style="color: rgba(128, 0, 128, 1)">17</span><span style="color: rgba(0, 0, 0, 1)">.684s][info   ][gc,heap,exit   ]  Metaspace       used 425K, committed 640K, reserved 1114112K [</span><span style="color: rgba(128, 0, 128, 1)">17</span>.684s][info   ][gc,heap,exit   ]<span style="color: rgba(0, 0, 255, 1)">class</span> space    used 24K, committed 128K, reserved 1048576K</pre> </div> <p>从日志看出，内存进行了回收，说明JVM 的GC使用的不是引用计数算法。</p> <p><strong>根搜索算法</strong><br />通过一系列的名为 “GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象的GC Roots 没有任何引用链相连时，则证明此对象是不可用的。</p> <p>引用<br />引用分为：</p> <ul> <li>强引用(Strong Reference) ：只要强引用还在，垃圾收集器永远不会回收掉引用的对象。</li> <li>软引用（Soft Reference）:在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</li> <li>弱引用（Weak Reference）：被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</li> <li>虚引用（Phantom Reference）（幽灵引用、幻影引用）：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。</li> </ul> <p>在跟搜索算法中不可达的对象，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与GC Roots相连的引用链，那它将会被第一次标记并进行一次筛选，筛选条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况视为“没有必要执行”。<br />如果对象有必要执行finalize()方法，那么这个对象将被放置在一个F-Queue的队列之中由Finalizer线程(虚拟机建立并出发)执行。finalizer用于告诉垃圾回收器下一步应该执行的操作。然后，GC将对F-Queue中的对象进行二次小规模的标记。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> memory;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> FinalizeEscapeGC {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span>  FinalizeEscapeGC SAVE_HOOK =<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  isAlive(){         System.out.println(</span>"yes, i am still alive;"<span style="color: rgba(0, 0, 0, 1)">);     }     @Override</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">void</span> finalize()<span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> Throwable{</span><span style="color: rgba(0, 0, 255, 1)">super</span><span style="color: rgba(0, 0, 0, 1)">.finalize();         System.out.println(</span>"fialize mehtod executed!"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">重新引用</span>         FinalizeEscapeGC.SAVE_HOOK =<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span> main(String[] args)<span style="color: rgba(0, 0, 255, 1)">throws</span><span style="color: rgba(0, 0, 0, 1)"> Throwable{         SAVE_HOOK</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> FinalizeEscapeGC();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">对象第一次成功拯救自己</span>         SAVE_HOOK =<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;         System.gc();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">因为Finalizer方法优先级很低，暂停500毫秒，等它执行</span>         Thread.sleep(500<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">if</span>(SAVE_HOOK !=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">){             SAVE_HOOK.isAlive();         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {             System.out.println(</span>"no ,i am dead"<span style="color: rgba(0, 0, 0, 1)">);         }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">下面这段代码与上面的完全相同，但是这次自救失败~</span>         SAVE_HOOK =<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;          System.gc();          Thread.sleep(</span>500<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">if</span>(SAVE_HOOK !=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">){             SAVE_HOOK.isAlive();         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {             System.out.println(</span>"no ,i am dead !!!"<span style="color: rgba(0, 0, 0, 1)">);         }     } }</span></pre> </div> <p>运行结果：</p> <div class="cnblogs_code"> <pre>fialize mehtod executed!<span style="color: rgba(0, 0, 0, 1)"> yes, i am still alive; no ,i am dead</span>!!!</pre> </div> <p>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，他的finalize()方法不会被再次执行。<br />finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、更及时。</p> <p><strong>回收方法区</strong></p> <ul> <li>回收的主要内容为：废弃常量和无用的类</li> <li>废弃常量：没有任何对象引用常量池中的常量，也没有其他地方引用这个字面量。</li> <li>无用类判定条件：</li> </ul> <ol> <li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li> <li>加载该类的ClassLoader已经被回收。</li> <li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li> </ol> <p><strong>垃圾收集算法</strong></p> <p><strong>标记-清除算法</strong><br />首先标记出所有需要回收的对象，在标记完成后同意回收掉所有被标记的对象。<br />缺点：</p> <ul> <li>一个是效率问题，标记和清除过程的效率都不高；</li> <li>另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致程序在需要分配较大对象时无法找到连续的内存，而不得不提前触发另一次垃圾收集动作。</li> </ul> <p><strong>复制算法</strong><br />将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完后，就将还存活的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。<br />缺点：将内存缩小为原来的一半。<br />现在商业虚拟机都采用这种收机算法来回收新生代，将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中的一块Survivor。当回收时，将Eden和Survivor中还存活的对象一次性拷贝到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。<br />这里有个问题，无法保证回收后存活对象一块Survivor空间够用,所以这里需要依赖其他内存(老年代)进行分配担保。</p> <p><strong>标记-整理算法</strong><br />根据老年代的特点，对存活对象进行标记，让所有存活对象向一端移动，然后直接清理掉端边以外的内存。</p> <p><strong>分代收机算法</strong><br />根据对象吨货周期的不同将内存划分为几块，JAVA一般将堆分为新生代和老生代，这样就可以根据各个年代的特点采用最适当的收集算法。</p> <p><strong>垃圾收集器</strong><br /><strong>Serial收集器</strong><br />是最基本、历史最悠久的收集器，是一个单线程收集器，在进行垃圾收集的时候，会暂停掉其他的所有工作线程。（简单而高效）</p> <p><strong>ParNew收集器</strong><br />Serial收集器的多线程版，除了使用多线程进行垃圾收集外，其余的与Serial收集器一致。关注点是尽可能缩短用户线程停顿时间。</p> <p><strong>Parallel Scavenge 收集器</strong><br />新生代收集器，他也是使用复制算法的收集器，也是并行的多线程收集器。目标是达到一个可控制的吞吐量。自适应调节策略。<br />吞吐量 = 运行用户代码的时间/(运行用户代码时间+垃圾收集时间)<br />停顿时间越短就越需要与用户交互的程序，良好的响应速度能提升用户体验；高吞吐量则可以更高效率地利用CPU时间，尽快完成程序的运算任务，主要适用于后台运算而不需要太多交互的任务。</p> <p><strong>Serial Old收集器</strong><br />Serial Old是Serial收集器的老年代版本，使用“标记-整理”算法。</p> <p><strong>Parallel Old收集器</strong><br />是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p> <p><strong>CMS收集器</strong><br />CMS收集器是一种以获取最短回收停顿时间为目标的收集器。使用“标记-清除”算法实现。<br />步骤：</p> <ul> <li>初始标记</li> <li>并发标记</li> <li>重新标记</li> <li>并发清除</li> <li>其中初始标记、重新标记两个步骤需要用户工作线程暂停，初始标记只标记GC Roots能直接关联到的对象，并发标记阶段进行 GC Root Tracing 过程，重新标记阶段则是为修正并发标记期间，用户程序继续运行而导致标记变化产生变动的那部分对象的标记记录。</li> <li>缺点：</li> <li>CMS收集器对CPU资源非常敏感。CMS默认用的回收线程数（CPU数量+3）/4。为解决该问题，虚拟机提供了一种i-CMS（增量式并发收集器）的CMS收集器变种，工作方式就是在并发标记和并发清理的时候让GC线程与用户线程交替运行，尽量减少GC线程独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得少一些。</li> <li>CMS收集器无法处理浮动垃圾。如果CMS运行期预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时候虚拟机将启动后备元：临时启动Serial Old 收集器重新进行老年代的垃圾收集。</li> <li>CMS是一款基于“标记-清除”算法实现的收集器，收集结束时会产生大量的空间碎片。</li> </ul> <p><strong>G1 收集器</strong></p> <ul> <li>G1收集器是基于“标记-整理”算法实现的收集器，也就是说它不会产生空间碎片，这对于长时间运行的应用系统来说非常重要。</li> <li>它可以非常精准地控制停顿，既能让使用者明确指定在一个长度为M毫秒的时间片段，消耗在垃圾收集上的时间不得超过N毫秒。</li> </ul> <p>G1将正好Java堆（包括新生代、老年代）划分为多个大小固定的独立区域，并且跟踪这些区域里面的垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，有限回抽垃圾最多的区域。</p> <span class="directory"></span><h4 id="title-0">内存分配和回收策略</h4> <h5><a id="Eden_192" rel="nofollow"></a>对象优先在Eden分配</h5> <p>多数情况下，对象在新生代Eden区中扽配，当Eden区域没有足够的空间分配时，虚拟机将发起一次Minor GC。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> memory;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> JavaEdenTest {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 255, 1)">int</span> _1MB = 1024 *1024<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  testAllocation(){</span><span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[] allocation1,allocation2,allocation3,allocation4;         allocation1</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[2 *<span style="color: rgba(0, 0, 0, 1)">_1MB];         allocation2</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[2 *<span style="color: rgba(0, 0, 0, 1)"> _1MB];         allocation3</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[2 *<span style="color: rgba(0, 0, 0, 1)">_1MB];         allocation4</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[4 *<span style="color: rgba(0, 0, 0, 1)">_1MB];     }</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * -verbose:gc      * -Xms20M -Xmx20M -Xmn10M   显示JAVA堆的大小20M且不可扩展      * 其中10M分配给新生代，剩余10M分配给老年代      * -XX:SurvivorRatio=8 确定新生代中的Eden区与一个Survivor区域的空间比例为8：1      * -XX:+PrintGCDetails 打印详细的收集器日志参数      *      *</span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)"> args</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  main(String[] args){         testAllocation();     } }</span></pre> </div> <p>运行日志：</p> <div class="cnblogs_code"> <pre>[16.630s][info   ][gc,start    ] GC(0<span style="color: rgba(0, 0, 0, 1)">) Pause Young (Concurrent Start) (G1 Humongous Allocation) [</span>16.631s][info   ][gc,task     ] GC(0) Using 2 workers of 8<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> evacuation [</span>16.639s][info   ][gc,phases   ] GC(0)   Pre Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.3ms [</span>16.639s][info   ][gc,phases   ] GC(0)   Merge Heap Roots: 0<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>16.639s][info   ][gc,phases   ] GC(0)   Evacuate Collection Set: 4<span style="color: rgba(0, 0, 0, 1)">.8ms [</span>16.639s][info   ][gc,phases   ] GC(0)   Post Evacuate Collection Set: 2<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>16.639s][info   ][gc,phases   ] GC(0)   Other: 0<span style="color: rgba(0, 0, 0, 1)">.8ms [</span>16.639s][info   ][gc,heap     ] GC(0) Eden regions: 3-&gt;0(9<span style="color: rgba(0, 0, 0, 1)">) [</span>16.639s][info   ][gc,heap     ] GC(0) Survivor regions: 0-&gt;1(2<span style="color: rgba(0, 0, 0, 1)">) [</span>16.639s][info   ][gc,heap     ] GC(0) Old regions: 0-&gt;0<span style="color: rgba(0, 0, 0, 1)"> [</span>16.639s][info   ][gc,heap     ] GC(0) Archive regions: 0-&gt;0<span style="color: rgba(0, 0, 0, 1)"> [</span>16.639s][info   ][gc,heap     ] GC(0) Humongous regions: 9-&gt;9<span style="color: rgba(0, 0, 0, 1)"> [</span>16.639s][info   ][gc,metaspace] GC(0) Metaspace: 419K(576K)-&gt;419K(576K) NonClass: 394K(448K)-&gt;394K(448K) Class: 24K(128K)-&gt;<span style="color: rgba(0, 0, 0, 1)">24K(128K) [</span>16.639s][info   ][gc          ] GC(0) Pause Young (Concurrent Start) (G1 Humongous Allocation) 11M-&gt;10M(20M) 9<span style="color: rgba(0, 0, 0, 1)">.150ms [</span>16.639s][info   ][gc,cpu      ] GC(0) User=0.00s Sys=0.00s Real=0<span style="color: rgba(0, 0, 0, 1)">.01s [</span>16.640s][info   ][gc          ] GC(1<span style="color: rgba(0, 0, 0, 1)">) Concurrent Undo Cycle [</span>16.640s][info   ][gc,marking  ] GC(1) Concurrent Cleanup<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> Next Mark [</span>16.640s][info   ][gc,marking  ] GC(1) Concurrent Cleanup<span style="color: rgba(0, 0, 255, 1)">for</span> Next Mark 0<span style="color: rgba(0, 0, 0, 1)">.402ms [</span>16.640s][info   ][gc          ] GC(1) Concurrent Undo Cycle 0.770ms</pre> </div> <p>allocation4在实例化时，出发了一次Minor GC。</p> <p><strong>大对象直接进入老年代</strong><br />VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -XX:+PrintGCDetails -XX:PretenureSizeThreshold=3145728<br />-XX:PretenureSizeThreshold的作用是令大于这个设置值的对象直接进入老年代中分配。<br />避免在Eden区及两个Survivor区之间发生大量的内存拷贝。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> memory;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> JavaTestBigObjectGC {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 255, 1)">int</span> _1MB = 1024 * 1024<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  main(String[] args){</span><span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[] allocation;         allocation</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[4 *<span style="color: rgba(0, 0, 0, 1)"> _1MB];     } }</span></pre> </div> <p>运行日志：</p> <div class="cnblogs_code"> <pre>[5<span style="color: rgba(0, 0, 0, 1)">.942s][info   ][gc,heap,exit] Heap [</span>5.942s][info   ][gc,heap,exit]  garbage-first heap   total 20480K, used 7586K [0x00000000fec00000, 0x0000000100000000<span style="color: rgba(0, 0, 0, 1)">) [</span>5.942s][info   ][gc,heap,exit]   region size 1024K, 3 young (3072K), 0<span style="color: rgba(0, 0, 0, 1)"> survivors (0K) [</span>5<span style="color: rgba(0, 0, 0, 1)">.942s][info   ][gc,heap,exit]  Metaspace       used 419K, committed 576K, reserved 1114112K [</span>5.942s][info   ][gc,heap,exit]<span style="color: rgba(0, 0, 255, 1)">class</span> space    used 24K, committed 128K, reserved 1048576K</pre> </div> <p><strong>长期存活对象进入老年代</strong><br />虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden中生成，没经过一次Minor GC后仍然存活，并且能被Survivor容纳的话，将会被移动到Survivor空间中，并将对象年龄设置为1，当年龄增加到一定程度（默认为15岁）时，就会被晋升到老年代中。<br />对象寄生老年的年龄阈值，可以使用-XX:MaxTenuringThreshold来设置。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> memory;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> JavaTestTenuringThreshold {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 255, 1)">int</span> _1MB = 1024 *1024<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8      * -XX:MaxTenuringThreshold=1</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  testTenuringThreshold(){</span><span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)">[] allocation1,allocation2,allocation3;         allocation1</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[4 *<span style="color: rgba(0, 0, 0, 1)"> _1MB];         allocation2</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[4 *<span style="color: rgba(0, 0, 0, 1)"> _1MB];         allocation3</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[4*<span style="color: rgba(0, 0, 0, 1)"> _1MB];         allocation3</span>=<span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">;         allocation3</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 255, 1)">byte</span>[4*<span style="color: rgba(0, 0, 0, 1)">_1MB];      }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)">  main(String[] args){         testTenuringThreshold();     } }</span></pre> </div> <div class="cnblogs_code"> <pre>[6.680s][info   ][gc,start    ] GC(0<span style="color: rgba(0, 0, 0, 1)">) Pause Young (Concurrent Start) (G1 Humongous Allocation) [</span>6.680s][info   ][gc,task     ] GC(0) Using 2 workers of 8<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> evacuation [</span>6.688s][info   ][gc,phases   ] GC(0)   Pre Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.4ms [</span>6.688s][info   ][gc,phases   ] GC(0)   Merge Heap Roots: 0<span style="color: rgba(0, 0, 0, 1)">.2ms [</span>6.688s][info   ][gc,phases   ] GC(0)   Evacuate Collection Set: 4<span style="color: rgba(0, 0, 0, 1)">.8ms [</span>6.688s][info   ][gc,phases   ] GC(0)   Post Evacuate Collection Set: 1<span style="color: rgba(0, 0, 0, 1)">.8ms [</span>6.688s][info   ][gc,phases   ] GC(0)   Other: 0<span style="color: rgba(0, 0, 0, 1)">.7ms [</span>6.688s][info   ][gc,heap     ] GC(0) Eden regions: 3-&gt;0(9<span style="color: rgba(0, 0, 0, 1)">) [</span>6.688s][info   ][gc,heap     ] GC(0) Survivor regions: 0-&gt;1(2<span style="color: rgba(0, 0, 0, 1)">) [</span>6.688s][info   ][gc,heap     ] GC(0) Old regions: 0-&gt;0<span style="color: rgba(0, 0, 0, 1)"> [</span>6.688s][info   ][gc,heap     ] GC(0) Archive regions: 0-&gt;0<span style="color: rgba(0, 0, 0, 1)"> [</span>6.688s][info   ][gc,heap     ] GC(0) Humongous regions: 5-&gt;5<span style="color: rgba(0, 0, 0, 1)"> [</span>6.688s][info   ][gc,metaspace] GC(0) Metaspace: 423K(640K)-&gt;423K(640K) NonClass: 399K(512K)-&gt;399K(512K) Class: 24K(128K)-&gt;<span style="color: rgba(0, 0, 0, 1)">24K(128K) [</span>6.688s][info   ][gc          ] GC(0) Pause Young (Concurrent Start) (G1 Humongous Allocation) 7M-&gt;6M(20M) 8<span style="color: rgba(0, 0, 0, 1)">.803ms [</span>6.688s][info   ][gc,cpu      ] GC(0) User=0.02s Sys=0.02s Real=0<span style="color: rgba(0, 0, 0, 1)">.01s [</span>6.689s][info   ][gc          ] GC(1<span style="color: rgba(0, 0, 0, 1)">) Concurrent Undo Cycle [</span>6.689s][info   ][gc,marking  ] GC(1) Concurrent Cleanup<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> Next Mark [</span>6.689s][info   ][gc,marking  ] GC(1) Concurrent Cleanup<span style="color: rgba(0, 0, 255, 1)">for</span> Next Mark 0<span style="color: rgba(0, 0, 0, 1)">.187ms [</span>6.689s][info   ][gc          ] GC(1) Concurrent Undo Cycle 0<span style="color: rgba(0, 0, 0, 1)">.494ms [</span>6.696s][info   ][gc,start    ] GC(2<span style="color: rgba(0, 0, 0, 1)">) Pause Young (Concurrent Start) (G1 Humongous Allocation) [</span>6.696s][info   ][gc,task     ] GC(2) Using 2 workers of 8<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> evacuation [</span>6.699s][info   ][gc,phases   ] GC(2)   Pre Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.2ms [</span>6.699s][info   ][gc,phases   ] GC(2)   Merge Heap Roots: 0<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>6.699s][info   ][gc,phases   ] GC(2)   Evacuate Collection Set: 1<span style="color: rgba(0, 0, 0, 1)">.9ms [</span>6.699s][info   ][gc,phases   ] GC(2)   Post Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.5ms [</span>6.699s][info   ][gc,phases   ] GC(2)   Other: 0<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>6.699s][info   ][gc,heap     ] GC(2) Eden regions: 0-&gt;0(10<span style="color: rgba(0, 0, 0, 1)">) [</span>6.699s][info   ][gc,heap     ] GC(2) Survivor regions: 1-&gt;0(2<span style="color: rgba(0, 0, 0, 1)">) [</span>6.699s][info   ][gc,heap     ] GC(2) Old regions: 0-&gt;1<span style="color: rgba(0, 0, 0, 1)"> [</span>6.699s][info   ][gc,heap     ] GC(2) Archive regions: 0-&gt;0<span style="color: rgba(0, 0, 0, 1)"> [</span>6.699s][info   ][gc,heap     ] GC(2) Humongous regions: 10-&gt;10<span style="color: rgba(0, 0, 0, 1)"> [</span>6.699s][info   ][gc,metaspace] GC(2) Metaspace: 424K(640K)-&gt;424K(640K) NonClass: 399K(512K)-&gt;399K(512K) Class: 24K(128K)-&gt;<span style="color: rgba(0, 0, 0, 1)">24K(128K) [</span>6.699s][info   ][gc          ] GC(2) Pause Young (Concurrent Start) (G1 Humongous Allocation) 11M-&gt;10M(20M) 3<span style="color: rgba(0, 0, 0, 1)">.165ms [</span>6.699s][info   ][gc,cpu      ] GC(2) User=0.02s Sys=0.02s Real=0<span style="color: rgba(0, 0, 0, 1)">.00s [</span>6.699s][info   ][gc          ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Mark Cycle [</span>6.699s][info   ][gc,marking  ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Clear Claimed Marks [</span>6.699s][info   ][gc,marking  ] GC(3) Concurrent Clear Claimed Marks 0<span style="color: rgba(0, 0, 0, 1)">.011ms [</span>6.699s][info   ][gc,marking  ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Scan Root Regions [</span>6.700s][info   ][gc,marking  ] GC(3) Concurrent Scan Root Regions 0<span style="color: rgba(0, 0, 0, 1)">.900ms [</span>6.700s][info   ][gc,marking  ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Mark [</span>6.700s][info   ][gc,marking  ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Mark From Roots [</span>6.700s][info   ][gc,task     ] GC(3) Using 2 workers of 2<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> marking [</span>6.701s][info   ][gc,marking  ] GC(3) Concurrent Mark From Roots 0<span style="color: rgba(0, 0, 0, 1)">.666ms [</span>6.701s][info   ][gc,marking  ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Preclean [</span>6.701s][info   ][gc,marking  ] GC(3) Concurrent Preclean 0<span style="color: rgba(0, 0, 0, 1)">.013ms [</span>6.715s][info   ][gc,start    ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Pause Remark [</span>6.716s][info   ][gc          ] GC(3) Pause Remark 15M-&gt;15M(20M) 0<span style="color: rgba(0, 0, 0, 1)">.810ms [</span>6.716s][info   ][gc,cpu      ] GC(3) User=0.00s Sys=0.00s Real=0<span style="color: rgba(0, 0, 0, 1)">.00s [</span>6.716s][info   ][gc,marking  ] GC(3) Concurrent Mark 16<span style="color: rgba(0, 0, 0, 1)">.267ms [</span>6.716s][info   ][gc,marking  ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Concurrent Rebuild Remembered Sets [</span>6.716s][info   ][gc,marking  ] GC(3) Concurrent Rebuild Remembered Sets 0<span style="color: rgba(0, 0, 0, 1)">.007ms [</span>6.717s][info   ][gc,start    ] GC(3<span style="color: rgba(0, 0, 0, 1)">) Pause Cleanup [</span>6.717s][info   ][gc          ] GC(3) Pause Cleanup 15M-&gt;15M(20M) 0<span style="color: rgba(0, 0, 0, 1)">.019ms [</span>6.717s][info   ][gc,cpu      ] GC(3) User=0.00s Sys=0.00s Real=0<span style="color: rgba(0, 0, 0, 1)">.00s [</span>6.717s][info   ][gc,marking  ] GC(3) Concurrent Cleanup<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> Next Mark [</span>6.717s][info   ][gc,start    ] GC(4<span style="color: rgba(0, 0, 0, 1)">) Pause Young (Normal) (G1 Humongous Allocation) [</span>6.717s][info   ][gc,task     ] GC(4) Using 2 workers of 8<span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> evacuation [</span>6.718s][info   ][gc,phases   ] GC(4)   Pre Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>6.718s][info   ][gc,phases   ] GC(4)   Merge Heap Roots: 0<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>6.718s][info   ][gc,phases   ] GC(4)   Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.1ms [</span>6.718s][info   ][gc,phases   ] GC(4)   Post Evacuate Collection Set: 0<span style="color: rgba(0, 0, 0, 1)">.4ms [</span>6.718s][info   ][gc,phases   ] GC(4)   Other: 0<span style="color: rgba(0, 0, 0, 1)">.0ms [</span>6.718s][info   ][gc,heap     ] GC(4) Eden regions: 0-&gt;0(10<span style="color: rgba(0, 0, 0, 1)">) [</span>6.718s][info   ][gc,heap     ] GC(4) Survivor regions: 0-&gt;0(2<span style="color: rgba(0, 0, 0, 1)">) [</span>6.718s][info   ][gc,heap     ] GC(4) Old regions: 1-&gt;1<span style="color: rgba(0, 0, 0, 1)"> [</span>6.718s][info   ][gc,heap     ] GC(4) Archive regions: 0-&gt;0<span style="color: rgba(0, 0, 0, 1)"> [</span>6.718s][info   ][gc,heap     ] GC(4) Humongous regions: 15-&gt;10<span style="color: rgba(0, 0, 0, 1)"> [</span>6.718s][info   ][gc,metaspace] GC(4) Metaspace: 424K(640K)-&gt;424K(640K) NonClass: 399K(512K)-&gt;399K(512K) Class: 24K(128K)-&gt;<span style="color: rgba(0, 0, 0, 1)">24K(128K) [</span>6.718s][info   ][gc          ] GC(4) Pause Young (Normal) (G1 Humongous Allocation) 15M-&gt;10M(20M) 0<span style="color: rgba(0, 0, 0, 1)">.861ms [</span>6.718s][info   ][gc,cpu      ] GC(4) User=0.00s Sys=0.00s Real=0<span style="color: rgba(0, 0, 0, 1)">.00s [</span>6.718s][info   ][gc,marking  ] GC(3) Concurrent Cleanup<span style="color: rgba(0, 0, 255, 1)">for</span> Next Mark 1<span style="color: rgba(0, 0, 0, 1)">.440ms [</span>6.718s][info   ][gc          ] GC(3) Concurrent Mark Cycle 19.012ms</pre> </div> <p><strong>动态对象年龄判定</strong><br />为了能更好地适应不同程序的内存情况，虚拟机并不总是要求对象的年龄必须达到MaxTenuringshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</p> <p><strong>空间担保</strong><br />在发生Minor GC时，虚拟机会在检测之前每次晋升到老年代的平均大小是否大于老年代的剩余空间大小，如果大于，则改为直接进行一次Full GC。如果小于，则查看HandlePromotionFailure设置是否允许担保失败；如果允许，那只会进行Minor GC;如果不允许，则也要改为进行一次 Full GC。</p> <hr/> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/563258656f5967410a1fc4f3dc8407d3.jpg" alt="垃圾收集器与内存分配策略_在线工具"></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-50600.htm">解决 “TypeError Cannot read properties of undefined (reading ‘xxx‘)“</a></p>
                                        <p>下一个：<a href="/news/article-51100.htm">promise和async/await区别</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-49056.htm" title="一个宠物店一年的纯利润（宠物店利润高吗）">一个宠物店一年的纯利润（宠物店利润高吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-free-high-speed-nodes.htm" title="「1月20日」最高速度20.9M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费机场订阅节点链接">「1月20日」最高速度20.9M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-23042.htm" title="哪里买婴儿用品便宜（买婴儿用品去哪里买）">哪里买婴儿用品便宜（买婴儿用品去哪里买）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-17-node-share.htm" title="「1月17日」最高速度20.4M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费机场订阅节点链接">「1月17日」最高速度20.4M/S，2025年SSR/Clash/Shadowrocket/V2ray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-29072.htm" title="宠物粮食加工厂挣钱吗知乎文章内容（小型宠物粮加工厂需要什么手续）">宠物粮食加工厂挣钱吗知乎文章内容（小型宠物粮加工厂需要什么手续）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-clash-node-github.htm" title="「11月18日」最高速度19.2M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费机场订阅节点链接">「11月18日」最高速度19.2M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-38663.htm" title="动物疫苗过量注射有什么后果 动物疫苗过量注射有什么后果吗">动物疫苗过量注射有什么后果 动物疫苗过量注射有什么后果吗</a></li>
                        <li class="py-2"><a href="/news/article-26293.htm" title="宠物寄养协议书范本图片（宠物寄养协议有法律效力吗）">宠物寄养协议书范本图片（宠物寄养协议有法律效力吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-free-node-subscribe-links.htm" title="「1月19日」最高速度22M/S，2025年Clash/V2ray/SSR/Shadowrocket每天更新免费机场订阅节点链接">「1月19日」最高速度22M/S，2025年Clash/V2ray/SSR/Shadowrocket每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-26-linux-clash-github.htm" title="「11月26日」最高速度21M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费机场订阅节点链接">「11月26日」最高速度21M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
    </main>
        <!-- Footer 3 - Bootstrap Brain Component -->
    <footer class="footer">
        <div class="border-top py-4 py-md-5 py-xl-8">
            <div class="container overflow-hidden">
                <div class="row gy-4 gy-md-0">
                    <div class="col-xs-12 col-md-12 order-2 order-md-1">
                        <div class="footer-copyright-wrapper text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            WindowsClashNode节点订阅站 版权所有 Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/windowsclashnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclashnode/bootstrap/bootstrap.bundle.min.js"></script>
    <!-- Javascript Files: Controllers -->
    <script src="/assets/website/js/frontend/windowsclashnode/global.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>