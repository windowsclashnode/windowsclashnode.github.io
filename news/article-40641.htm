<!doctype html>
<html lang="en">

<head>
        <link rel="canonical" href="https://windowsclashnode.github.io/news/article-40641.htm" />
    <!-- Required Meta Tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Document Title, Description, and Author -->
    <title>八、C++ 类型强转</title>
        <meta name="description" content="1.静态类型转换 1.语法格式 static_cast&lt;目标类型&gt; (标识符)  2.转化规则 在一个方向上可以作隐式转换，在另外一个方向上就可以作静态转换。 int a = 10; in" />
        <link rel="icon" href="/assets/website/img/windowsclashnode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts Files -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Condensed:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap" rel="stylesheet">
    <!-- CSS Files -->
    <link rel="stylesheet" href="/assets/website/css/windowsclashnode/hello-bsb.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FQY7STE0Q8"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FQY7STE0Q8');
</script>    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#bsb-tpl-navbar" data-bs-smooth-scroll="true" tabindex="0" data-page="detail">
        <!-- Header -->
    <header id="header" class="sticky-top bsb-tpl-header-sticky bsb-tpl-header-sticky-animationX">
        <!-- Navbar 1 - Bootstrap Brain Component -->
        <nav id="scrollspyNav" class="navbar navbar-expand-lg bsb-tpl-bg-alabaster bsb-navbar bsb-navbar-hover bsb-navbar-caret bsb-tpl-navbar-sticky" data-bsb-sticky-target="#header">
            <div class="container">
                                <h1>
                    <a class="navbar-brand" href="/">
                        Windows Clash Node
                    </a>
                </h1>
                                <button class="navbar-toggler border-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" />
                    </svg>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Menu</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <ul id="bsb-tpl-navbar" class="navbar-nav justify-content-end flex-grow-1">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="#">关于</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">联系</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <!-- Hero 3 - Bootstrap Brain Component -->
    <section id="scrollspyHero" class="bsb-tpl-bg-alabaster pt-3 pt-xl-2 list">
        <div class="container overflow-hidden">
            <div class="row gy-5 gy-lg-0">
                <div class="col-12 col-lg-6 slogan">
                    <h1 class="display-3 fw-bold mb-3">八、C++ 类型强转 </h1>
                    <p class="fs-4 mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
                <div class="col-12 col-lg-5 text-center">
                    <div class="position-relative">
                        <div class="bsb-circle border border-4 border-accent position-absolute top-50 start-10 translate-middle z-1"></div>
                        <div class="bsb-circle bg-primary position-absolute top-50 start-50 translate-middle" style="--bsb-cs: 460px;"></div>
                        <div class="bsb-circle border border-4 border-accent position-absolute top-10 end-0 z-1" style="--bsb-cs: 100px;"></div>
                        <img class="img-fluid position-relative z-2" loading="lazy" href="/assets/website/img/windowsclashnode/hero/hero-img-1.webp" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Main -->
    <main id="main">
        <!-- Process 1 - Bootstrap Brain Component -->
        <section id="scrollspyAbout" class="py-5 py-xl-8 py-xxl-16">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <h2> <a id="1_1" rel="nofollow"></a>1.静态类型转换</h2> <p>1.语法格式</p> <pre><code class="prism language-c">static_cast<span class="token operator">&lt;</span>目标类型<span class="token operator">&gt;</span> <span class="token punctuation">(</span>标识符<span class="token punctuation">)</span> </code></pre> <p>2.转化规则<br /> 在一个方向上可以作隐式转换，在另外一个方向上就可以作静态转换。</p> <pre><code class="prism language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> cout<span class="token operator">&lt;&lt;</span>static_cast<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//float = int int = float</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> </code></pre> <pre><code class="prism language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>q<span class="token punctuation">;</span> p <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <pre><code class="prism language-c"><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h2> <a id="2_25" rel="nofollow"></a>2.重解释类型转换</h2> <p>1.语法格式</p> <pre><code class="prism language-c">reinterpret_cast<span class="token operator">&lt;</span>目标类型<span class="token operator">&gt;</span> <span class="token punctuation">(</span>标识符<span class="token punctuation">)</span> </code></pre> <p>2.转化规则<br /> 将数据以二进制存在形式的重新解释，在双方向上都不可以隐式类型转换的，则需要重解释类型转换</p> <pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span> using namespace std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x12345648</span><span class="token punctuation">;</span> 	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//char*p = static_cast&lt;char*&gt;(&amp;x); error</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 	<span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/9c06e3763a17dd82fe9e3ca258cee682.jpg" alt="八、C++ 类型强转"></p> <h2> <a id="3_50" rel="nofollow"></a>3.常类型转换</h2> <p>1.语法格式</p> <pre><code class="prism language-c">const_cast<span class="token operator">&lt;</span>目标类型<span class="token operator">&gt;</span> <span class="token punctuation">(</span>标识符<span class="token punctuation">)</span> <span class="token comment">//目标类类型只能是指针或引用。</span> </code></pre> <p>2.语法规则<br /> 用来移除对象的常量性使用 const_cast 去除 const 限定的，目的不是为了修改它的内容，使用 const_cast 去除 const 限定，通常是为了函数能够接受这个实际参数。</p> <pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span> using namespace std<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span> ref<span class="token punctuation">)</span> <span class="token comment">//别人己经写好的程序或类库</span> <span class="token punctuation">{<!-- --></span> 	cout<span class="token operator">&lt;&lt;</span>ref<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">const</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 	<span class="token function">func</span><span class="token punctuation">(</span>const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p>脱掉const后的引用或指针可以改吗</p> <pre><code class="prism language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span> using namespace std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> 	<span class="token keyword">int</span> <span class="token operator">&amp;</span> a <span class="token operator">=</span>const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int &amp;a = x;</span> 	a <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> 	cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 	cout<span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">"---"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span>const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int *p = &amp;x;</span> 	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span> 	cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 	cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"---"</span><span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 	<span class="token keyword">struct</span> <span class="token class-name">A</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">int</span> data<span class="token punctuation">;</span> 	<span class="token punctuation">}</span><span class="token punctuation">;</span> 	<span class="token keyword">const</span> A xx <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">1111</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 	A <span class="token operator">&amp;</span>a1 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span> A<span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span> 	a1<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span> 	cout<span class="token operator">&lt;&lt;</span>a1<span class="token punctuation">.</span>data<span class="token operator">&lt;&lt;</span>xx<span class="token punctuation">.</span>data<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 	A <span class="token operator">*</span>p1 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span>A<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span> 	p1<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span> 	cout<span class="token operator">&lt;&lt;</span>p1<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span>xx<span class="token punctuation">.</span>data<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/3dcf7e8ef380e8a4b7ff9e25357b6952.jpg" alt="八、C++ 类型强转"><br /><strong>结论:可以改变 const 自定义类的成员变量，但是对于内置数据类型，却表现未定义行为</strong><br /> 3.const 常变量（补充）<br /> C++中 const 定义的变量称为常变量。变量的形式，常量的作用，用作常量，常用于取代#define 宏常量</p> <h2> <a id="4_107" rel="nofollow"></a>4.动态类型转换</h2> <p>1.语法格式</p> <pre><code class="prism language-c">dynamic_cast<span class="token operator">&lt;</span>目标类型<span class="token operator">&gt;</span> <span class="token punctuation">(</span>标识符<span class="token punctuation">)</span> </code></pre> <p>用于多态中的父子类之间的强制转化</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-40140.htm">合肥宠物领养贴吧（合肥宠物领养微信群）</a></p>
                                        <p>下一个：<a href="/news/article-40642.htm">PyTorch的自动求导</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-33409.htm" title="北京芭比堂动物医院电话号码（芭比堂动物医院有限责任公司）">北京芭比堂动物医院电话号码（芭比堂动物医院有限责任公司）</a></li>
                        <li class="py-2"><a href="/news/article-26758.htm" title="小动物去打预防针（动物打防疫针）">小动物去打预防针（动物打防疫针）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-10-free-shadowrocket-node.htm" title="「12月10日」最高速度18.6M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费机场订阅节点链接">「12月10日」最高速度18.6M/S，2024年Shadowrocket/Clash/V2ray/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-24-free-ssr-node.htm" title="「10月24日」最高速度20.2M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费机场订阅节点链接">「10月24日」最高速度20.2M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-22579.htm" title="字符串替换 — C语言【由特殊到一般，找规律，定公式】">字符串替换 — C语言【由特殊到一般，找规律，定公式】</a></li>
                        <li class="py-2"><a href="/news/article-30962.htm" title="动物疫苗的使用年限是多少年（动物疫苗的使用年限是多少年的）">动物疫苗的使用年限是多少年（动物疫苗的使用年限是多少年的）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-8-free-clash.htm" title="「11月8日」最高速度19.6M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅节点链接">「11月8日」最高速度19.6M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-7-clash-v2ray-ss-ssr.htm" title="「10月7日」最高速度18M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费机场订阅节点链接">「10月7日」最高速度18M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-41127.htm" title="动物医院 翻译英文 动物医院 翻译英文怎么说">动物医院 翻译英文 动物医院 翻译英文怎么说</a></li>
                        <li class="py-2"><a href="/news/article-22580.htm" title="国内知名宠物品牌（国内知名宠物品牌排行榜）">国内知名宠物品牌（国内知名宠物品牌排行榜）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
    </main>
        <!-- Footer 3 - Bootstrap Brain Component -->
    <footer class="footer">
        <div class="border-top py-4 py-md-5 py-xl-8">
            <div class="container overflow-hidden">
                <div class="row gy-4 gy-md-0">
                    <div class="col-xs-12 col-md-12 order-2 order-md-1">
                        <div class="footer-copyright-wrapper text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            WindowsClashNode节点订阅站 版权所有 Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/windowsclashnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclashnode/bootstrap/bootstrap.bundle.min.js"></script>
    <!-- Javascript Files: Controllers -->
    <script src="/assets/website/js/frontend/windowsclashnode/global.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>