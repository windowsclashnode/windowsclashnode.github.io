<!doctype html>
<html lang="en">

<head>
        <link rel="canonical" href="https://windowsclashnode.github.io/news/article-46599.htm" />
    <!-- Required Meta Tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Document Title, Description, and Author -->
    <title>实战代码（十）：Springboot RestTemplate连接池</title>
        <meta name="description" content="一、理论基础 RestTemplate是Springboot中内置的Http请求工具，可以直接注入使用。 两个常用的构造方法如下图 (点击进入文档地址)  从上面可以看出，最简单的方式就是使用默认配置" />
        <link rel="icon" href="/assets/website/img/windowsclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="WindowsClashNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://windowsclashnode.github.io/news/article-46599.htm" />
    <meta property="og:site_name" content="WindowsClashNode节点订阅站" />
    <meta property="og:title" content="实战代码（十）：Springboot RestTemplate连接池" />
    <meta property="og:image" content="https://windowsclashnode.github.io/uploads/20240618/3b3e7ca9e945ccf09bbdae2620d7a4ad.webp" />
        <meta property="og:release_date" content="2025-01-26T09:59:54" />
    <meta property="og:updated_time" content="2025-01-26T09:59:54" />
        <meta property="og:description" content="一、理论基础 RestTemplate是Springboot中内置的Http请求工具，可以直接注入使用。 两个常用的构造方法如下图 (点击进入文档地址)  从上面可以看出，最简单的方式就是使用默认配置" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="实战代码（十）：Springboot RestTemplate连接池">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google Fonts Files -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Condensed:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap" rel="stylesheet">
    <!-- CSS Files -->
    <link rel="stylesheet" href="/assets/website/css/windowsclashnode/hello-bsb.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FQY7STE0Q8"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FQY7STE0Q8');
</script>    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-bs-spy="scroll" data-bs-target="#bsb-tpl-navbar" data-bs-smooth-scroll="true" tabindex="0" data-page="detail">
        <!-- Header -->
    <header id="header" class="sticky-top bsb-tpl-header-sticky bsb-tpl-header-sticky-animationX">
        <!-- Navbar 1 - Bootstrap Brain Component -->
        <nav id="scrollspyNav" class="navbar navbar-expand-lg bsb-tpl-bg-alabaster bsb-navbar bsb-navbar-hover bsb-navbar-caret bsb-tpl-navbar-sticky" data-bsb-sticky-target="#header">
            <div class="container">
                                <h1>
                    <a class="navbar-brand" href="/">
                        Windows Clash Node
                    </a>
                </h1>
                                <button class="navbar-toggler border-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" />
                    </svg>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                    <div class="offcanvas-header">
                        <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Menu</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <ul id="bsb-tpl-navbar" class="navbar-nav justify-content-end flex-grow-1">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="#">关于</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">联系</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <!-- Hero 3 - Bootstrap Brain Component -->
    <section id="scrollspyHero" class="bsb-tpl-bg-alabaster pt-3 pt-xl-2 list">
        <div class="container overflow-hidden">
            <div class="row gy-5 gy-lg-0">
                <div class="col-12 col-lg-6 slogan">
                    <h1 class="display-3 fw-bold mb-3">实战代码（十）：Springboot RestTemplate连接池 </h1>
                    <p class="fs-4 mb-5">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
                <div class="col-12 col-lg-5 text-center">
                    <div class="position-relative">
                        <div class="bsb-circle border border-4 border-accent position-absolute top-50 start-10 translate-middle z-1"></div>
                        <div class="bsb-circle bg-primary position-absolute top-50 start-50 translate-middle" style="--bsb-cs: 460px;"></div>
                        <div class="bsb-circle border border-4 border-accent position-absolute top-10 end-0 z-1" style="--bsb-cs: 100px;"></div>
                        <img class="img-fluid position-relative z-2" loading="lazy" href="/assets/website/img/windowsclashnode/hero/hero-img-1.webp" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Main -->
    <main id="main">
        <!-- Process 1 - Bootstrap Brain Component -->
        <section id="scrollspyAbout" class="py-5 py-xl-8 py-xxl-16">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h2> <a id="_0" rel="nofollow"></a>一、理论基础</h2> <p>RestTemplate是Springboot中内置的Http请求工具，可以直接注入使用。</p> <p>两个常用的构造方法如下图 (<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html"  rel="nofollow">点击进入文档地址</a>)</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230118/022688cf7850af5bc35eb9d12a51e6ad.jpg" alt="实战代码（十）：Springboot RestTemplate连接池"></p> <p>从上面可以看出，最简单的方式就是使用默认配置，不需要额外的配置，便可以直接使用该工具。对于请求频次比较低的情况下，默认配置完全够用。</p> <p>如果需要大量的请求，可以自定义配置，使用HttpClient的连接池。</p> <h2> <a id="_14" rel="nofollow"></a>二、实战代码</h2> <h3> <a id="21__16" rel="nofollow"></a>2.1 依赖引入</h3> <pre><code>&lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; 	&lt;exclusions&gt; 		&lt;exclusion&gt; 			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 			&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; 		&lt;/exclusion&gt; 	&lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- 将tomcat替换为undertow --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;/dependency&gt;  &lt;!-- 自定义的元数据依赖 --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; 	&lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;  &lt;!-- httpclient，为了使用其连接池 --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; 	&lt;artifactId&gt;httpclient&lt;/artifactId&gt; 	&lt;version&gt;4.5.12&lt;/version&gt; &lt;/dependency&gt;  &lt;!-- for fastjson --&gt; &lt;dependency&gt; 	&lt;groupId&gt;com.alibaba&lt;/groupId&gt; 	&lt;artifactId&gt;fastjson&lt;/artifactId&gt; 	&lt;version&gt;1.2.62&lt;/version&gt; &lt;/dependency&gt;  &lt;!-- lombok，减少代码量，idea需要安装lombok插件 --&gt; &lt;dependency&gt; 	&lt;groupId&gt;org.projectlombok&lt;/groupId&gt; 	&lt;artifactId&gt;lombok&lt;/artifactId&gt; 	&lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; </code></pre> <h3> <a id="22__64" rel="nofollow"></a>2.2 配置项</h3> <h3> <a id="221__66" rel="nofollow"></a>2.2.1 配置</h3> <pre><code>http:   pool:     # 连接超时     connectTimeout: 5000     connectionRequestTimeout: 5000     defaultMaxPerRoute: 20     # 最大连接数     maxTotal: 100     # 服务器返回数据(response)的时间     socketTimeout: 5000     validateAfterInactivity: 30000 </code></pre> <h3> <a id="222__83" rel="nofollow"></a>2.2.2 读取配置文件</h3> <pre><code>@Component @ConfigurationProperties(prefix = "http.pool") @Data public class HttpClientProperties {       /**      * 最大连接数      */     private Integer maxTotal;     /**      * 路由是对最大连接数的细分      * 每个路由基础的连接数      */     private Integer defaultMaxPerRoute;     /**      * 连接超时时间      */     private Integer connectTimeout;     /**      * 从连接池中获取连接的超时时间      */     private Integer connectionRequestTimeout;     /**      * 服务器返回数据(response)的时间      */     private Integer socketTimeout;     /**      * 可用空闲连接过期时间      * 重用空闲连接时会先检查是否空闲时间超过这个时间，如果超过，释放socket重新建立      */     private Integer validateAfterInactivity; } </code></pre> <h3> <a id="23__122" rel="nofollow"></a>2.3 配置文件</h3> <pre><code>@Configuration public class RestTemplateConfig {       private final HttpClientProperties httpClientProperties;      public RestTemplateConfig(HttpClientProperties httpClientProperties) {         this.httpClientProperties = httpClientProperties;     }       @Bean     public RestTemplate restTemplate(ClientHttpRequestFactory factory){         return new RestTemplate(factory);     }       @Bean     public ClientHttpRequestFactory clientHttpRequestFactory(){         return new HttpComponentsClientHttpRequestFactory(httpClient());     }       @Bean     public HttpClient httpClient() {         Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()                 .register("http", PlainConnectionSocketFactory.getSocketFactory())                 .register("https", SSLConnectionSocketFactory.getSocketFactory())                 .build();         PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(registry);         connectionManager.setMaxTotal(httpClientProperties.getMaxTotal());         connectionManager.setDefaultMaxPerRoute(httpClientProperties.getDefaultMaxPerRoute());         connectionManager.setValidateAfterInactivity(httpClientProperties.getValidateAfterInactivity());         RequestConfig requestConfig = RequestConfig.custom()                 .setSocketTimeout(httpClientProperties.getSocketTimeout())                 .setConnectTimeout(httpClientProperties.getConnectTimeout())                 .setConnectionRequestTimeout(httpClientProperties.getConnectionRequestTimeout())                 .build();         return HttpClientBuilder.create()                 .setDefaultRequestConfig(requestConfig)                 .setConnectionManager(connectionManager)                 .build();     } } </code></pre> <h3> <a id="24__172" rel="nofollow"></a>2.4 简单的工具类</h3> <pre><code>@Component @Slf4j public class HttpClientUtils {      private final RestTemplate restTemplate;      public HttpClientUtils(RestTemplate restTemplate) {         this.restTemplate = restTemplate;     }      /**      * Get      */     public String get(String uri, Map&lt;String, String&gt; param, String token) {         HttpHeaders headers = new HttpHeaders();         headers.set("token", token);         HttpEntity&lt;String&gt; requestEntity = new HttpEntity&lt;&gt;(null, headers);         StringBuilder url = new StringBuilder();         url.append(uri).append("?");         param.forEach((k, v) -&gt; url.append(k).append("=").append(v).append("&amp;"));         String getUrl = url.substring(0, url.length() - 1);         ResponseEntity&lt;CodeResult&gt; response = restTemplate.exchange(getUrl, HttpMethod.GET, requestEntity, CodeResult.class);         return parseCodeResult(response);     }      /**      * post方式请求接口      * - 参数形式：form-data      */     public String postFormData(String url, MultiValueMap&lt;String, Object&gt; paramMap, String token) {         HttpHeaders headers = new HttpHeaders();         headers.set("token", token);         headers.setContentType(MediaType.MULTIPART_FORM_DATA);         //用HttpEntity封装整个请求报文         HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; files = new HttpEntity&lt;&gt;(paramMap, headers);         ResponseEntity&lt;CodeResult&gt; response = restTemplate.postForEntity(url, files, CodeResult.class);         return parseCodeResult(response);     }      /**      * post方式请求接口      * - 参数形式：json      */     public String postJson(String url, String param, String token) {         HttpHeaders headers = new HttpHeaders();         headers.setContentType(MediaType.APPLICATION_JSON);         headers.set("token", token);         HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(param, headers);         ResponseEntity&lt;CodeResult&gt; response = restTemplate.postForEntity(url, entity, CodeResult.class);         return parseCodeResult(response);     }      /**      * 解析云端服务接口返回值      */     public String parseCodeResult(ResponseEntity&lt;CodeResult&gt; response) {         if (response.getStatusCodeValue() != HttpStatus.OK.value()) {             throw new RuntimeException("网络请求失败,状态码:" + response.getStatusCodeValue());         }         CodeResult codeResult = response.getBody();         assert codeResult != null;         if (!codeResult.getSuccess()) {             log.error("调用后台服务接口错误,返回值:{}", JSON.toJSON(codeResult));             throw new RuntimeException("调用后台服务接口错误， 错误信息：" + codeResult.getMsg());         }         return JSON.toJSONString(codeResult.getData());     } } </code></pre> <h2> <a id="_245" rel="nofollow"></a>三、源码地址</h2> <p>https://github.com/lysmile/spring-boot-demo/tree/master/spring-boot-resttemplate-demo</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-46108.htm">验钞机价格多少钱一台(验钞机十大品牌及价格)</a></p>
                                        <p>下一个：<a href="/news/article-46600.htm">中国最大的猫粮批发市场 宠物粮食加工厂好做吗</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-28612.htm" title="Java中Stack.peek()与Stack.pop()与Queue.poll的区别">Java中Stack.peek()与Stack.pop()与Queue.poll的区别</a></li>
                        <li class="py-2"><a href="/news/article-19829.htm" title="三国杀武将限定技特效（三国杀中武将限定技是什么）">三国杀武将限定技特效（三国杀中武将限定技是什么）</a></li>
                        <li class="py-2"><a href="/news/article-50091.htm" title="Task提高异步执行效率技巧_C#教程_">Task提高异步执行效率技巧_C#教程_</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-21-clash-v2ray-ss-ssr.htm" title="「11月21日」最高速度20.3M/S，2024年SSR/V2ray/Clash/Shadowrocket每天更新免费机场订阅节点链接">「11月21日」最高速度20.3M/S，2024年SSR/V2ray/Clash/Shadowrocket每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-45112.htm" title="政府购买动物防疫服务外包方案（政府购买动物防疫服务外包方案怎么写）">政府购买动物防疫服务外包方案（政府购买动物防疫服务外包方案怎么写）</a></li>
                        <li class="py-2"><a href="/news/article-32391.htm" title="动物接种视频教程完整版（动物接种是什么意思）">动物接种视频教程完整版（动物接种是什么意思）</a></li>
                        <li class="py-2"><a href="/news/article-28138.htm" title="c++引用折叠">c++引用折叠</a></li>
                        <li class="py-2"><a href="/news/article-34780.htm" title="上海宠物领养地址查询（上海地区宠物领养）">上海宠物领养地址查询（上海地区宠物领养）</a></li>
                        <li class="py-2"><a href="/news/article-35958.htm" title="Python基于类型提示的数据解析和验证库pydantic">Python基于类型提示的数据解析和验证库pydantic</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-8-free-subscribe-node.htm" title="「1月8日」最高速度18.8M/S，2025年SSR/Shadowrocket/Clash/V2ray每天更新免费机场订阅节点链接">「1月8日」最高速度18.8M/S，2025年SSR/Shadowrocket/Clash/V2ray每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
    </main>
        <!-- Footer 3 - Bootstrap Brain Component -->
    <footer class="footer">
        <div class="border-top py-4 py-md-5 py-xl-8">
            <div class="container overflow-hidden">
                <div class="row gy-4 gy-md-0">
                    <div class="col-xs-12 col-md-12 order-2 order-md-1">
                        <div class="footer-copyright-wrapper text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            WindowsClashNode节点订阅站 版权所有 Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/windowsclashnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/windowsclashnode/bootstrap/bootstrap.bundle.min.js"></script>
    <!-- Javascript Files: Controllers -->
    <script src="/assets/website/js/frontend/windowsclashnode/global.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>